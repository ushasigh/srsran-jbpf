{{ $ran_cnt := 0 | int }}

{{- range $ran_name, $values := .Values.duConfigs }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: srs-gnb-cm-{{ $ran_name }}

data:
  config.json: |-
      {{ $.Values | toJson }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: srs-gnb-{{ $ran_name }}
  labels:
    app: srs-gnb-{{ $ran_name }}
    {{- include "ran-5g.labels" $ | nindent 4 }}
spec:
  serviceName: srs-service-gnb-{{ $ran_name }}
  selector:
    matchLabels:
      app: srs-gnb-{{ $ran_name }}
      {{- include "ran-5g.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      labels:
        app: srs-gnb-{{ $ran_name }}
        {{- include "ran-5g.selectorLabels" $ | nindent 8 }}
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
              {
                "name": "srs-sriov-cu"
              }
              {{- range $idx_c, $cell := $values.cells }}
              ,{
                "name": "srs-{{ $ran_name }}-sriov-fh-instance-{{ $idx_c }}"
              }
              {{- end }}
            ]'

    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      serviceAccountName: srs-service-account
      terminationGracePeriodSeconds: 0
      volumes:
      - name: dshm
        hostPath:
          path: /dev/shm
      - name: hugepage
        hostPath:
          path: /dev/hugepages
      - name: sys
        hostPath:
          path: /sys
      - name: dev
        hostPath:
          path: /dev
      - name: varjbpf
        hostPath:
          path: {{ printf "%s/%s" $.Values.jbpf.cfg.jbpf_run_path $.Values.jbpf.cfg.jbpf_namespace }}
      - name: codelets
        hostPath:
          path: {{ $.Values.jbpf.codelets_vol_mount }}
      - name: du-config-volume
        configMap:
          name: srs-gnb-cm-{{ $ran_name }}


      {{- if (or (or $.Values.vlan_isolation.enabled (eq (int $.Values.jbpf.cfg.jbpf_enable_ipc) 1))  (and (not $.Values.debug_mode.enabled) $.Values.das.enabled) ) }}
      initContainers:
      
      {{- if (and (not $.Values.debug_mode.enabled) $.Values.das.enabled) }}
      # Init container to wait for RANBooster to start
      - name: wait-for-das
        image: {{ $.Values.troubleshooter.image }}
        command:
          - /bin/sh
          - -c
          - |
              POD_NAME="srs-das-middlebox-{{ $.Values.das.dasboxes.das1.middlebox.dasName }}-0"
              echo "*** Das Middlebox: ${POD_NAME}"             
              while ! curl -s -k -X GET -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                -H "Content-Type: application/json" \
                "https://kubernetes.default.svc/api/v1/namespaces/ran/pods/$POD_NAME/log" | \
                grep -q 'Single core used, so running one thread'; do
                  echo "*** Waiting for DAS middlebox to start..."
                  sleep 2
              done
              echo "*** Das middlebox is ready"
      {{- end }}

      {{- if (and (not $.Values.debug_mode.enabled) (eq (int $.Values.jbpf.cfg.jbpf_enable_ipc) 1)) }}
      - name: wait-for-jrtc
        image: {{ $.Values.troubleshooter.image }}
        env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        command:
        - "/bin/bash"
        - "-c"
        - "until nc -z jrtc-service.ran.svc.cluster.local 3001 > /dev/null; do
          echo Waiting for jrtc-service.ran.svc.cluster.local:3001;
          sleep 2;
          done;"
      {{- end }}

      {{- if $.Values.vlan_isolation.enabled }}
      {{range $idx_c, $cell := $values.cells}}
      # Init container to set VLANs for RUs using a custom API
      - name: initvlan-{{ $idx_c }}
        image: {{ $.Values.troubleshooter.image }}
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command:
        - "/bin/bash"
        - "-c"
        - >
          echo 'Waiting for VLANs to be set...' &&
          curl -s --show-error -f -X PUT "http://{{ $.Values.vlan_isolation.url }}/tor_switch/assign_servers_to_ru?servers=$(MY_NODE_NAME)&ru={{ $cell.ruNAME }}" &&
          echo 'All VLANs set, continuing'
      {{end}}
      {{- end }}

      {{- end }}

      containers:

      {{- if  $.Values.troubleshooter.enabled }}
      - name: troubleshooter
        image: {{ $.Values.troubleshooter.image }}
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 30; done;" ]
      {{- end }}

      {{- if eq (int $.Values.jbpf.cfg.jbpf_enable_ipc) 1 }}
      {{- if $.Values.udp_forwarder.enabled }}
      - name: udpforwarder
        image: {{ $.Values.image.srs_jbpf }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        env:
          - name: LISTEN_IP
            value: "{{ $.Values.sriov.cucp_ip }}"
          - name: LISTEN_PORT
            value: "{{ add $.Values.udp_forwarder.port $ran_cnt }}"
          - name: FORWARD_IP
            value: "jrtc-udp-input.{{ $.Release.Namespace }}.svc.cluster.local"
          - name: FORWARD_PORT
            value: "{{ $.Values.udp_forwarder.port }}"
        command: ["/udp_forwarder/udp_forwarder.sh"]
      {{- end }}
      {{- end }}

      - name: gnb
        image: "{{ $.Values.image.srs_jbpf }}"
        imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
        volumeMounts:
        - name: dshm
          mountPath: /dev/shm
        - name: hugepage
          mountPath: /dev/hugepages
        - name: sys
          mountPath: /sys/
        - name: dev
          mountPath: /dev/
        - name: varjbpf
          mountPath: {{ printf "%s/%s" $.Values.jbpf.cfg.jbpf_run_path $.Values.jbpf.cfg.jbpf_namespace }}
        - name: codelets
          mountPath: /codelets
        - name: du-config-volume
          mountPath: /du-config
          readOnly: true

        command: ["/bin/sh", "-c"]
        {{- if  $.Values.debug_mode.enabled }}
        args: [ "sleep 99999999d" ]
        {{- else }}
        args: [ "/opt/Scripts/run.sh" ]
        {{- end }}
        env:
          - name: DEBUG_MODE
            value: "{{ $.Values.debug_mode.enabled }}"
          - name: JBPF_CODELETS
            value: "/codelets"
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
            - IPC_LOCK
            - SYS_NICE
        tty: true
        stdin: true


        resources:
          limits:
            cpu: {{ $.Values.resources.gnb.limits.cpu }}
            memory: {{ $.Values.resources.gnb.limits.memory }}
            hugepages-1Gi: {{ $.Values.resources.gnb.limits.hugepages1Gi }}
            {{ $.Values.sriov.resourceName }}: 1

          {{ $c := 0 | int }}
          {{range $cell := $values.cells}}
            {{ $cell.ruDPDKResource }}: 1
            {{ $c = add1 $c }}
          {{- end }}


          requests:
            cpu: {{ $.Values.resources.gnb.requests.cpu }}
            memory: {{ $.Values.resources.gnb.requests.memory }}
            hugepages-1Gi: {{ $.Values.resources.gnb.requests.hugepages1Gi }}
            {{ $.Values.sriov.resourceName }}: 1

          {{ $c := 0 | int }}
          {{range $cell := $values.cells}}
            {{ $cell.ruDPDKResource }}: 1
            {{ $c = add1 $c }}
          {{- end }}


      - name: srs-gnb-proxy
        image: "{{ $.Values.image.srs_jbpf_proxy }}"
        imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
        command: ["/src/out/bin/srsran_reverse_proxy"]
        args:
          - "--host-port"
          - "{{ add $.Values.jbpf.port }}"
          - "--address"
          - "{{ printf "%s/%s/%s" $.Values.jbpf.cfg.jbpf_run_path $.Values.jbpf.cfg.jbpf_namespace $.Values.jbpf.cfg.jbpf_lcm_ipc_name }}"

        resources:
          limits:
            {{- toYaml $.Values.resources.jbpf_proxy.limits | nindent 12 }}
          requests:
            {{- toYaml $.Values.resources.jbpf_proxy.requests | nindent 12 }}
        volumeMounts:
          - name: varjbpf
            mountPath: {{ printf "%s/%s" $.Values.jbpf.cfg.jbpf_run_path $.Values.jbpf.cfg.jbpf_namespace }}
          - name: codelets
            mountPath: /codelets
        env:
          - name: JBPF_CODELETS
            value: "/codelets"



---

# DNS name: srs-gnb-{{ $ran_name }}-io-in.{{ $.Release.Namespace }}.svc.cluster.local
kind: Service
apiVersion: v1
metadata:
  name: srs-gnb-{{ $ran_name }}-io-in
  namespace: {{ $.Release.Namespace }}
  labels:
    app: srs-gnb-{{ $ran_name }}
spec:
  selector:
    app: srs-gnb-{{ $ran_name }}
  type: NodePort
  ports:
    - name: io-in-port
      protocol: UDP
      port: {{ add $.Values.jbpf.cfg.jbpf_standalone_io_in_port $ran_cnt }}
      targetPort: {{ add $.Values.jbpf.cfg.jbpf_standalone_io_in_port $ran_cnt }}
      nodePort: {{ add $.Values.jbpf.cfg.jbpf_standalone_io_in_port $ran_cnt }}


---

# DNS name: srs-gnb-{{ $ran_name }}-proxy.{{ $.Release.Namespace }}.svc.cluster.local
kind: Service
apiVersion: v1
metadata:
  name: srs-gnb-{{ $ran_name }}-proxy
  namespace: {{ $.Release.Namespace }}
  labels:
    app: srs-gnb-{{ $ran_name }}
spec:
  selector:
    app: srs-gnb-{{ $ran_name }}
  type: NodePort
  ports:
    - name: proxy-port
      protocol: TCP
      port: {{ add $.Values.jbpf.port $ran_cnt }}
      targetPort: {{ add $.Values.jbpf.port $ran_cnt }}
      nodePort: {{ add $.Values.jbpf.port $ran_cnt }}

---

# DNS name:srs-gnb-{{ $ran_name }}-udpforwarder.{{ $.Release.Namespace }}.svc.cluster.local
kind: Service
apiVersion: v1
metadata:
  name: srs-gnb-{{ $ran_name }}-udpforwarder
  namespace: {{ $.Release.Namespace }}
  labels:
    app: srs-gnb-{{ $ran_name }}
spec:
  selector:
    app: srs-gnb-{{ $ran_name }}
  type: NodePort
  ports:
    - name: udpforwarder-port
      protocol: UDP
      port: {{ add $.Values.udp_forwarder.port $ran_cnt }}
      targetPort: {{ add $.Values.udp_forwarder.port $ran_cnt }}
      nodePort: {{ add $.Values.udp_forwarder.port $ran_cnt }}


{{ $ran_cnt = add1 $ran_cnt }}

{{- end }}





